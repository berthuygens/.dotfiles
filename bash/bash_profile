export LC_ALL=en_US.UTF-8
export PATH=~/Library/Python/2.7/bin:$PATH
export PATH="$PATH:~/"
export PATH="$PATH:~/awsscripts"
export BASH_SILENCE_DEPRECATION_WARNING=1
export TERM=xterm-256color
export PATH="/usr/local/opt/postgresql@9.6/bin:$PATH"
gam() { "/Users/bertzijngedacht/bin/gam/gam" "$@" ; }
# Various variables you might want for your PS1 prompt instead
# PS1="👻:$"
# we pass 2 parameters to __git_ps1 as pre and post which are strings.
export PROMPT_COMMAND='__git_ps1 "\W" "($)""\[\e[33m\] ⌁ \[\e[0m\]"'

# if .git-prompt.sh exists, set options and execute it
if [ -f ~/.git-prompt.sh ]; then
	GIT_PS1_SHOWDIRTYSTATE=true
	GIT_PS1_SHOWSTASHSTATE=true
	GIT_PS1_SHOWUNTRACKEDFILES=true
	GIT_PS1_SHOWUPSTREAM="auto"
	GIT_PS1_HIDE_IF_PWD_IGNORED=true
	GIT_PS1_SHOWCOLORHINTS=true
	. ~/.git-prompt.sh
fi
#
if command -v tmux &> /dev/null && [ -z "$TMUX" ]; then
    tmux attach -t default || tmux new -s default
fi
#alias
# pull in private stuff
if [ -f ~/.bash_aliases ]; then
	. ~/.bash_aliases
fi
# aliasses
alias :q="exit"
alias ll='ls -la'
alias rf='rm -rf'
alias commitID='git rev-parse HEAD' 
alias proxyssh='~/awsscripts/ssh/proxyssh.sh'
alias proxy2ssh='~/awsscripts/ssh/proxy2.sh'
alias proxysync='~/awsscripts/ssh/proxysync.sh'
alias proxy='~/awsscripts/ssh/proxy.sh'
alias proxydisconnect='~/awsscripts/ssh/proxydisconnect.sh'
alias cdaws='cd ~/awsscripts'
alias scripts='cd ~/awsscripts'
alias cdcloudformation='cd ~/cloudformation-templates'
alias cdyaml='cd ~/cloudformation-templates/YamlTemplates'
alias proxies='aws ec2 describe-instances  --filters "Name=key-name,Values=inbo-ops-proxy"|grep PRIVATEIPADDRESSES'
alias publicip='dig +short myip.opendns.com @resolver1.opendns.com'
alias checknetwork='/Volumes/GoogleDrive/My\ Drive/apps/scripts/checknetwork/checknetwork.sh'
alias cdssh='cd ~/awsscripts/ssh'
alias genpass='openssl rand -base64 6'
alias cdpem='cd ~/pem'
complete -C aws_completer aws
alias instance="~/awsscripts/Compute/Ec2/Instances/instance.sh"
alias ip="~/awsscripts/Networking/ip.sh"
alias dnsinternal='~/awsscripts/Networking/53/53-internal.sh'
function countdown
{
        local OLD_IFS="${IFS}"
        IFS=":"
        local ARR=( $1 )
        local SECONDS=$((  (ARR[0] * 60 * 60) + (ARR[1] * 60) + ARR[2]  ))
        local START=$(date +%s)
        local END=$((START + SECONDS))
        local CUR=$START

        while [[ $CUR -lt $END ]]
        do
                CUR=$(date +%s)
                LEFT=$((END-CUR))

                printf "\r%02d:%02d:%02d" \
                        $((LEFT/3600)) $(( (LEFT/60)%60)) $((LEFT%60))

                sleep 1
        done
        IFS="${OLD_IFS}"
        echo "        "
}
